# Инструкции по настройке Render.com

## 1. Обновите package.json

Замените содержимое файла package.json на следующее:

```json
{
  "name": "bizon-furniture-store",
  "version": "1.0.0",
  "description": "Bizon Furniture Store",
  "main": "emergency-server.js",
  "engines": {
    "node": ">=14.0.0"
  },
  "scripts": {
    "start": "node emergency-server.js",
    "server": "cd server && npm start",
    "client": "cd client && npm install && npm start",
    "dev": "concurrently \"npm run server\" \"npm run client\""
  },
  "keywords": [
    "furniture",
    "store",
    "ecommerce"
  ],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "concurrently": "^8.2.2",
    "cors": "^2.8.5",
    "express": "^4.18.2"
  }
}
```

## 2. Настройте файл server/src/index.js

Замените содержимое файла server/src/index.js на следующее:

```javascript
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
require('dotenv').config();

// Импорт маршрутов
const productRoutes = require('./routes/product.routes');
const categoryRoutes = require('./routes/category.routes');
const orderRoutes = require('./routes/order.routes');
const userRoutes = require('./routes/user.routes');
const authRoutes = require('./routes/auth.routes');

const app = express();

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Статические файлы
app.use('/uploads', express.static(path.join(__dirname, '../uploads')));

// Базовый маршрут для проверки работы сервера
app.get('/', (req, res) => {
  res.json({ message: 'Сервер BIZON работает!' });
});

// Маршруты API
app.use('/api/products', productRoutes);
app.use('/api/categories', categoryRoutes);
app.use('/api/orders', orderRoutes);
app.use('/api/users', userRoutes);
app.use('/api/auth', authRoutes);

// Обработка ошибок
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send({ message: 'Что-то пошло не так!' });
});

// Подключение к MongoDB
const PORT = process.env.PORT || 10000;
// Используем стандартный формат подключения без SRV
const MONGO_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/bizon-furniture';

// Сначала запускаем сервер
const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`Сервер запущен на порту ${PORT}`);
  console.log(`Сервер доступен по адресу http://0.0.0.0:${PORT}`);
});

// Затем пытаемся подключиться к MongoDB
mongoose
  .connect(MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    serverSelectionTimeoutMS: 10000, // увеличиваем таймаут до 10 секунд
    connectTimeoutMS: 10000
  })
  .then(() => {
    console.log('Подключено к MongoDB');
  })
  .catch((err) => {
    console.error('Ошибка подключения к MongoDB:', err);
    console.log('Сервер продолжит работу без подключения к базе данных. Некоторые функции будут недоступны.');
  });

// Обработка сигналов завершения
process.on('SIGTERM', () => {
  console.log('Получен сигнал SIGTERM. Завершение работы сервера...');
  server.close(() => {
    console.log('Сервер остановлен');
    mongoose.connection.close(false, () => {
      console.log('Соединение с MongoDB закрыто');
      process.exit(0);
    });
  });
});
```

## 3. Создайте файл emergency-server.js

Создайте файл emergency-server.js в корне проекта со следующим содержимым:

```javascript
const express = require('express');
const cors = require('cors');
const app = express();

app.use(cors());
app.use(express.json());

const PORT = process.env.PORT || 10000;

app.get('/', (req, res) => {
  res.json({ 
    message: 'Сервер BIZON работает!',
    time: new Date().toISOString()
  });
});

app.get('/api/status', (req, res) => {
  res.json({
    status: 'online',
    mode: 'emergency',
    time: new Date().toISOString()
  });
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`Сервер запущен на порту ${PORT}`);
});
```

## 4. Настройте переменные окружения в Render.com

Добавьте следующие переменные окружения в разделе "Environment Variables":

```
PORT=10000
MONGO_URI=mongodb://localhost:27017/bizon-furniture
JWT_SECRET=bizon-furniture-jwt-secret
NODE_ENV=production
```

## 5. Настройте конфигурацию деплоя

- **Start Command**: `node emergency-server.js`
- **Node Version**: 14.0.0 или выше
- **Build Command**: `npm install`

## 6. Проверка после деплоя

После успешного деплоя перейдите по адресу вашего приложения. Вы должны увидеть сообщение:
```json
{
  "message": "Сервер BIZON работает!",
  "time": "2023-06-10T12:34:56.789Z"
}
```